name: Release & Deploy

# D√©clencheurs : tests √† chaque commit/PR sur main, release manuelle ou sur tag
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  create:
    tags:
      - 'v*.*.*'

# Permissions globales
permissions:
  contents: write      # pour pouvoir push des tags & cr√©er des releases
  id-token: write      # si vous utilisez OIDC
  actions: read

jobs:
  release-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"

      - name: Run release script
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN:   ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x release.sh
          ./release.sh

      - name: Authenticate GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Provision infra (Terraform)
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve -var project_id=${{ secrets.GCP_PROJECT }}
          
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 35.205.135.126 >> ~/.ssh/known_hosts
        shell: bash
        
      - name: Deploy Ansible
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/deploy.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'


      # Nouvelle √©tape pour d√©ployer le monitoring
      - name: Deploy Monitoring Stack
        run: |
          cd infra
          terraform apply -target=google_compute_instance.monitoring -target=google_compute_firewall.monitoring -auto-approve
          
      # R√©cup√©ration de l'IP du serveur de monitoring
      - name: Get Monitoring IP
        id: monitoring_ip
        run: |
          cd infra
          MONITORING_IP=$(terraform output -raw monitoring_ip)
          echo "monitoring_ip=$MONITORING_IP" >> $GITHUB_OUTPUT
          echo "Monitoring server IP: $MONITORING_IP"

      # V√©rification que les services de monitoring sont op√©rationnels
      - name: Verify Monitoring Services
        run: |
          echo "Waiting for monitoring services to start..."
          sleep 120
          
          # Test Prometheus
          curl -f http://${{ steps.monitoring_ip.outputs.monitoring_ip }}:9090/-/healthy || {
            echo "Prometheus health check failed"
            exit 1
          }
          
          # Test Grafana
          curl -f http://${{ steps.monitoring_ip.outputs.monitoring_ip }}:3000/api/health || {
            echo "Grafana health check failed"
            exit 1
          }
          
          echo "‚úÖ Monitoring stack is operational!"
          echo "üîç Prometheus: http://${{ steps.monitoring_ip.outputs.monitoring_ip }}:9090"
          echo "üìä Grafana: http://${{ steps.monitoring_ip.outputs.monitoring_ip }}:3000"
          echo "üö® Alertmanager: http://${{ steps.monitoring_ip.outputs.monitoring_ip }}:9093"